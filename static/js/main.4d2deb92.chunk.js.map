{"version":3,"sources":["components/Input/Input.module.css","components/Banner/Banner.module.css","components/ChatWindow/ChatForm/ChatForm.module.css","img/all_chat_white.svg","containers/MainBody/MainBody.module.css","components/ChatWindow/ChatWindow.module.css","components/ChatWindow/MessagesDisplay/MessagesDisplay.module.css","App.module.css","components/Banner/Banner.js","components/Input/Input.js","components/ChatWindow/MessagesDisplay/MessagesDisplay.js","components/ChatWindow/ChatForm/ChatForm.js","store/actions/chat.js","store/actions/actionTypes.js","components/ChatWindow/ChatWindow.js","containers/MainBody/MainBody.js","store/actions/name.js","App.js","serviceWorker.js","store/reducers/chat.js","store/reducers/name.js","index.js"],"names":["module","exports","Input","Label","InputElement","NameInput","ChatInput","Banner","Logo","BannerContainer","Form","Button","__webpack_require__","p","MainBody","ChatWindow","MessagesDisplay","App","banner","react_default","a","createElement","className","classes","src","favicon_white","alt","input","props","join","name","inputName","placeholder","value","onChange","changed","rows","columns","label","connect","state","messages","chat","messagesList","countForKey","map","msg","key","style","color","message","ChatForm","inputChangedHandler","event","_this","setState","target","chatSubmit","preventDefault","length","onChatSubmit","_this2","this","onSubmit","type","React","Component","dispatch","actionCreators","chatWindow","ChatWindow_ChatForm_ChatForm","onNameChanged","containers_MainBody_MainBody","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","Object","objectSpread","concat","Math","floor","random","toString","rootReducer","combineReducers","nameReducer","chatReducer","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d2deb92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1Q3TL\",\"Label\":\"Input_Label__2Wd4O\",\"InputElement\":\"Input_InputElement__1RYnI\",\"NameInput\":\"Input_NameInput__3o-kq\",\"ChatInput\":\"Input_ChatInput__2WYJL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Banner\":\"Banner_Banner__3b6yK\",\"Logo\":\"Banner_Logo__BT6bG\",\"BannerContainer\":\"Banner_BannerContainer__2XyUb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ChatForm_Form__ZkqmN\",\"Button\":\"ChatForm_Button__iy5gb\"};","module.exports = __webpack_public_path__ + \"static/media/all_chat_white.8c91f203.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainBody\":\"MainBody_MainBody__2guv3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatWindow\":\"ChatWindow_ChatWindow__Bnetz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessagesDisplay\":\"MessagesDisplay_MessagesDisplay__16POm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3yJvo\"};","import React from 'react';\n\nimport favicon_white from '../../img/all_chat_white.svg'\nimport classes from './Banner.module.css';\n\n// Simple header for the App, with an image logo\nconst banner = () => {\n    return (\n        <header className={classes.Banner}>\n            <div className={classes.BannerContainer}>\n                <img className={classes.Logo} src={favicon_white} alt='All_Chat' />\n            </div>\n        </header>\n    );\n};\n\nexport default banner;","import React from 'react';\n\nimport classes from './Input.module.css';\n\n// Simple customized Input component with label\n// Returns an input for the NameInput\n// Returns a textarea for the ChatInput\nconst input = (props) => {\n\n    let input = (\n        <input\n            className={[classes.InputElement, classes.NameInput].join(' ')}\n            name={props.inputName}\n            placeholder={props.placeholder}\n            value={props.value}\n            onChange={props.changed} />\n\n    );\n\n    if (props.inputName === 'ChatInput') {\n        input = (\n            <textarea\n                className={[classes.InputElement, classes.ChatInput].join(' ')}\n                name={props.inputName}\n                placeholder={props.placeholder}\n                value={props.value}\n                onChange={props.changed}\n                rows='1'\n                columns='1'\n            ></textarea>\n        );\n    }\n\n    return (\n        <div className={classes.Input}>\n            {props.inputName === 'NameInput' ? <label className={classes.Label}>{props.label}</label> : null}\n            {input}\n        </div>\n    );\n}\n\nexport default input; ","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport classes from './MessagesDisplay.module.css';\n\nconst messagesDisplay = (props) => {\n\n    // map each message in the global messagaesList array to a series of <p></p> element\n    let countForKey = +0; // use the message number as a key\n    const messages = props.messages.map(msg => {\n        countForKey += 1;\n        return (\n            <p key={countForKey}><strong style={msg.color}>{msg.name}:</strong> {msg.message}</p>\n        );\n    })\n\n    return (\n        <div className={classes.MessagesDisplay} >\n            {messages}\n        </div>\n    );\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        messages: state.chat.messagesList\n    };\n};\n\nexport default connect(mapStateToProps)(messagesDisplay);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Input from '../..//Input/Input';\nimport classes from './ChatForm.module.css';\nimport * as actionCreators from '../../../store/actions/index';\n\n// Form to take chat message input and take action on SEND\nclass ChatForm extends React.Component {\n\n    // stores the current value of the chat input field\n    state = {\n        message: ''\n    }\n\n    inputChangedHandler = (event) => {\n        // changes internal state on change in input field\n        this.setState({\n            message: event.target.value\n        });\n    }\n\n    // actions taken when SEND is clicked\n    chatSubmit = (event) => {\n        event.preventDefault(); // prevent page reload\n        // If message is not empty, dispatch action to add message and username to MessagesList in global state\n        if (this.state.message.length > 0)\n            this.props.onChatSubmit(this.props.name, this.state.message);\n        // reinitialize the value of input field and the internal state to empty\n        event.target.value = '';\n        this.setState({\n            message: ''\n        });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.chatSubmit} className={classes.Form}>\n                <Input\n                    inputName='ChatInput'\n                    placeholder='What do you want to say?'\n                    changed={(event) => this.inputChangedHandler(event)}\n                    value={this.state.message} />\n                <button className={classes.Button} type='submit'>SEND</button>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        name: state.name.name\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onChatSubmit: (name, message) => dispatch(actionCreators.chatSubmit(name, message))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatForm);","import * as actionTypes from './actionTypes';\n\n// The action of clicking SEND after typing a message\nexport const chatSubmit = (name, message) => {\n    return {\n        type: actionTypes.CHAT_SUBMIT,\n        name: name,\n        message: message\n    }\n}","// Only two action types needed for global state\nexport const NAME_CHANGED = 'NAME_CHANGED';\nexport const CHAT_SUBMIT = 'CHAT_SUBMIT';","import React from 'react';\n\nimport classes from './ChatWindow.module.css';\nimport MessagesDisplay from './MessagesDisplay/MessagesDisplay';\nimport ChatForm from './ChatForm/ChatForm';\n\n// simple chat window containing a display of past messages and the message input field\nconst chatWindow = () => (\n    <div className={classes.ChatWindow}>\n        <MessagesDisplay />\n        <ChatForm />\n    </div>\n);\n\nexport default chatWindow;","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../store/actions/index';\n\nimport classes from './MainBody.module.css';\nimport Input from '../../components/Input/Input';\nimport ChatWindow from '../../components/ChatWindow/ChatWindow';\n\n// Used to hold everything except the page header/banner\nclass MainBody extends React.Component {\n\n    // triggered everytime some change occurs in the username input\n    inputChangedHandler = (event) => {\n        let name = 'Anonymous';\n        // Name stays 'anonymous' if input field is empty\n        // else, it is set to the input string\n        if (event.target.value.length > +0) {\n            name = event.target.value;\n        }\n        // call the action to change global state\n        this.props.onNameChanged(name);\n    }\n\n    render() {\n        return (\n            <main className={classes.MainBody}>\n                <Input\n                    inputName='NameInput'\n                    label=\"You're using the name\"\n                    placeholder='Anonymous'\n                    changed={(event) => this.inputChangedHandler(event)}\n                />\n                <ChatWindow />\n            </main>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onNameChanged: (name) => dispatch(actionCreators.nameChanged(name))\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(MainBody);","import * as actionTypes from './actionTypes';\n\n// the action of making a change to user's set name\nexport const nameChanged = (name) => {\n    return {\n        type: actionTypes.NAME_CHANGED,\n        name: name\n    }\n}","import React from 'react';\n\nimport Banner from './components/Banner/Banner';\nimport MainBody from './containers/MainBody/MainBody';\nimport classes from './App.module.css';\n\n// Root App component\nclass App extends React.Component {\n    render() {\n        return (\n            <div className={classes.App}>\n                <Banner />\n                <MainBody />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\n// list of all messages to be displayed in the message box\nconst initialState = {\n    messagesList: []\n};\n\n// Generate a random color\nconst getRandomColor = () => {\n    const randomColor = Math.floor(Math.random() * 16777215).toString(16);\n    return '#' + randomColor;\n}\n\n\n// A reducer for chat-relaated functionality\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        // Case where user clicks SEND to send a mseesahe\n        case actionTypes.CHAT_SUBMIT: return {\n            ...state,\n            messagesList: state.messagesList.concat({\n                name: action.name,\n                color: {'color': getRandomColor()}, // random color gets associated with each message\n                message: action.message\n            })\n        };\n        default: return state;\n    }\n}\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\n// name used by the current user\n// defaults to anonymous\nconst initialState = {\n    name: 'Anonymous'\n};\n\n// a reducer to manage name changes made by user\nconst reducer = (state=initialState, action) => {\n    switch(action.type) {\n        case actionTypes.NAME_CHANGED: return {\n            ...state,\n            name: action.name\n        };\n        default: return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css'; // sets overall global styles such as font \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport chatReducer from './store/reducers/chat';\nimport nameReducer from './store/reducers/name';\n\n// assign tags to individual reducers and combine\nconst rootReducer = combineReducers({\n    name: nameReducer,\n    chat: chatReducer\n});\n\n// create a store using the combined reducers\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}